// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("AIVEN_PG_DB_URL")
}

model User {
  id            String  @id @default(cuid())
  displayName   String?
  username      String? @unique
  email         String  @unique
  avatar        String?
  emailVerified Boolean @default(false)
  status        Boolean @default(false)
  password      String?

  uid      String?
  provider String?

  profileId String?
  Profile   Profile? @relation(fields: [profileId], references: [id])

  userPreference   UserPreference? @relation(fields: [userPreferenceId], references: [id])
  userPreferenceId String?

  organizations Organization[]
  roles         Role[]
  Setting       Setting[]

  members  Member[]
  servers  Server[]
  channels Channel[]

  refreshToken String?
  accessToken  String?

  forgotPasswordToken       String?
  forgotPasswordTokenExpiry DateTime?

  verifyToken       String?
  verifyTokenExpiry DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([profileId])
  @@index([userPreferenceId])
}

model Profile {
  id        String  @id @default(cuid())
  firstName String?
  lastName  String?
  name      String?
  avatar    String? @db.Text
  email     String  @db.Text
  userId    String  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model Server {
  id         String  @id @default(cuid())
  name       String
  imageUrl   String  @db.Text
  inviteCode String  @unique
  selected   Boolean @default(false)

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  members  Member[]
  channels Channel[]
  boards   Board[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(cuid())
  name String
  type ChannelType @default(TEXT)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([serverId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(cuid())
  role MemberRole @default(GUEST)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages       Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  @@index([userId])
  @@index([serverId])
}

model Message {
  id      String @id @default(cuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(cuid())

  memberOneId String
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id      String  @id @default(cuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}

model Organization {
  id          String  @id @default(cuid())
  title       String
  description String?
  avatar      String?
  status      Boolean @default(true)
  active      Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  members Member[]
  boards  Board[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserPreference {
  id            String  @id @default(cuid())
  emailUpdates  Boolean @default(true)
  notifications Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]
}

model Role {
  id          String  @id @default(cuid())
  title       String
  description String?
  status      Boolean @default(true)

  users       User[]
  permissions Permission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id          String  @id @default(cuid())
  title       String
  description String
  status      Boolean @default(false)
  roles       Role[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Board {
  id             String  @id @default(cuid())
  title          String
  description    String?
  avatar         String?
  showBackground Boolean @default(true)
  status         Boolean @default(true)

  lists List[]

  Server   Server? @relation(fields: [serverId], references: [id])
  serverId String?

  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([serverId])
}

model List {
  id    String @id @default(cuid())
  title String
  order Int

  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  cards Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
}

model Card {
  id          String  @id @default(cuid())
  title       String
  order       Int
  description String? @db.Text

  listId String
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([listId])
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
}

model AuditLog {
  id          String  @id @default(uuid())
  orgId       String?
  action      String?
  entityId    String?
  entityType  String?
  entityTitle String?
  userId      String?
  userImage   String? @db.Text
  userName    String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrgLimit {
  id    String @id @default(uuid())
  orgId String @unique
  count Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrgSubscription {
  id    String @id @default(uuid())
  orgId String @unique

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model Setting {
  id          String  @id @default(cuid())
  key         String  @unique
  value       String?
  description String?

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
